from aiogram import Dispatcher
from aiogram.types import CallbackQuery, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from tgbot.misc.states import UserInfo
from tgbot.keyboards.callback_factory import lang_callback, jins_callback, programming_lang_callback, \
     education_callback, tasdiqlash_callback, yoshlar_callback, extra_lang_callback
from tgbot.keyboards.inline import prog_languages_kb, language_inl_kb, orqaga_inl_kb, yosh_tanlash_inl_kb, \
    education_inl_kb, jins_inl_kb, extra_skills_kb, qayta_tuzish_inl_kb 
from tgbot.keyboards.reply  import main_menu, phone_keyb
from tgbot.hr_i18n import _
import os
from tgbot.services.api import register

async def language_callbacks(callback: CallbackQuery, state: FSMContext, callback_data: dict):
    if callback_data.get('language') == "lotin_uz":
        await state.update_data(language="de")
    elif callback_data.get('language') == "russian":
        await state.update_data(language="ru")
    elif callback_data.get('language') == "kirill_uz":
        await state.update_data(language="uz")
    await UserInfo.first()
    data = await state.get_data()
    user_lang = data.get('language')

    try:
        await callback.message.delete()
    except Exception:
        pass
    await UserInfo.first()
    anketams = await callback.message.answer(_("–ë–æ—à –∏—à –æ—Ä–∏–Ω–ª–∞—Ä–∏–Ω–∏ –∫–æ—Ä–∏—à –≤–∞ —Ç–µ—Å—Ç–ª–∞—Ä–¥–∞–Ω –æ—Ç–∏—à —É—á—É–Ω –æ–∑–∏–Ω–≥–∏–∑ —Ö–∞–∫–∏–Ω–≥–∏–∑–¥–∞–≥–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥–∏—à–∏–Ω–≥–∏–∑ –∫–µ—Ä–∞–∫.", locale=user_lang), reply_markup=ReplyKeyboardRemove())
    fioms = await callback.message.answer(_("‚úçüèº –§–∞–º–∏–ª–∏—è, –ò—Å–º, –®–∞—Ä–∏—Ñ–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.", locale=user_lang), reply_markup=orqaga_inl_kb(user_lang))
    await state.update_data(fioms=fioms.message_id, anketams=anketams.message_id)
    
async def jins_callbacks(c: CallbackQuery, state: FSMContext, callback_data: dict):
    data = await state.get_data()
    user_lang = data.get('language')
    if callback_data.get("jinsi") == 'E':
        await state.update_data(jinsi="E")
    elif callback_data.get("jinsi") == 'A':
        await state.update_data(jinsi="A")
    await UserInfo.next()
    await c.message.edit_text(_("–Å—à–∏–Ω–≥–∏–∑:", locale=user_lang), reply_markup=yosh_tanlash_inl_kb(user_lang))

async def age_callbacks(c: CallbackQuery, state: FSMContext, callback_data: dict):
    data = await state.get_data()
    user_lang = data.get('language')
    await state.update_data(age=callback_data.get('kategoriyasi'))
    await UserInfo.next()
    await c.message.edit_text(_("–ú–∞—ä–ª—É–º–æ—Ç–∏–Ω–≥–∏–∑:", locale=user_lang), reply_markup=education_inl_kb(user_lang))

async def education_callbacks(c: CallbackQuery, state: FSMContext, callback_data: dict):
    await state.update_data(education=callback_data.get('daraja'))
    data = await state.get_data()
    user_lang = data.get('language')
    await UserInfo.next()
    await c.message.edit_text(_("“ö–∞–π—Å–∏ –¥–∞—Å—Ç—É—Ä–ª–∞—à —Ç–∏–ª–∏ –±—û–π–∏—á–∞ —û–∑ —Ñ–∞–æ–ª–∏—è—Ç–∏–Ω–≥–∏–∑–Ω–∏ —é—Ä–∏—Ç–∏—à–Ω–∏ –∏—Å—Ç–∞–π—Å–∏–∑ ?", locale=user_lang), reply_markup=await prog_languages_kb(data.get("language")))

async def prog_lang_callbacks(c: CallbackQuery, state: FSMContext, callback_data: dict):
    await state.update_data(prog_lang_id=callback_data.get("id"))
    await state.update_data(prog_lang=callback_data.get("language"))
    data = await state.get_data()
    user_lang = data.get('language')
    addms = await c.message.edit_text(_("“ö—û—à–∏–º—á–∞ –Ω–∏–º–∞–ª–∞—Ä–Ω–∏ –±–∏–ª–∞—Å–∏–∑?\n–¢–∞–Ω–ª–∞–Ω–≥–∞–Ω:", locale=user_lang), reply_markup=await extra_skills_kb(data.get("language"), dict()))
    await state.update_data(addms=addms.message_id)
    await UserInfo.next()

async def extra_skills(c: CallbackQuery, state: FSMContext, callback_data: dict):
    data = await state.get_data()
    user_lang = data.get('language')
    extra_id = data.get('extra_id') if data.get('extra_id') is not None else list()
    extra_category = data.get('extra_category') if data.get('extra_category') is not None else list()
    if callback_data.get('id') not in extra_id:
        extra_id.append(callback_data.get('id'))
        extra_category.append(callback_data.get('category'))
        await state.update_data(extra_id=extra_id, extra_category=extra_category)
    else:
        extra_id.remove(callback_data.get('id'))
        extra_category.remove(callback_data.get('category'))
        await state.update_data(extra_id=extra_id, extra_category=extra_category)
    extra_id = data.get('extra_category')
    await c.message.edit_text(_("“ö—û—à–∏–º—á–∞ –Ω–∏–º–∞–ª–∞—Ä–Ω–∏ –±–∏–ª–∞—Å–∏–∑?\n–¢–∞–Ω–ª–∞–Ω–≥–∞–Ω: {data}", locale=user_lang).format(data=', '.join(extra_category)), reply_markup=await extra_skills_kb(data.get("language"), extra_category)) 

async def tasdiqlash_callbacks(c: CallbackQuery, state: FSMContext, callback_data: dict):
    data = await state.get_data()
    user_lang = data.get('language')

    if callback_data.get('tanlov') == "accept":
        reg_req =  register(chat_id=c.message.chat.id, full_name=data.get('fio'), phone_number=data.get('phone'), 
        gender=data.get('jinsi'), education=data.get('education'), age=data.get('age'), progra_language=data.get('prog_lang_id'), 
        extra_skills=data.get('extra_id'), resume_name=data.get('resume_name'), lang=user_lang)
        if reg_req.status_code == 201:
            try:
                await c.message.delete()
            except Exception: 
                pass
            await c.answer()
            print(reg_req)
            await c.message.answer(_("üè° –ë–æ—à –º–µ–Ω—é:", locale=user_lang), reply_markup=main_menu(user_lang))
            await UserInfo.registered.set()
        else:
            print(dict(reg_req.json()).values())
            await c.message.edit_text(_("–•–∞—Ç–æ–ª–∏–∫!\n–ë—É —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∫–∞–º–∏ –∞–≤–≤–∞–ª —Ä–æ–π—Ö–∞—Ç–¥–∞–Ω –æ—Ç–∫–∞–∑–∏–ª–≥–∞–Ω\n–ò–ª—Ç–∏–º–æ—Å, –∞–Ω–∫–µ—Ç–∞–Ω–∏ –∫–∞–π—Ç–∞ —Ç–æ–ª–¥–∏—Ä–∏–Ω–≥!", locale=user_lang), reply_markup=qayta_tuzish_inl_kb(data.get('lang')))
        
        # await c.message.answer(_("–ë–æ—à –º–µ–Ω—é:"), reply_markup=main_menu_keyb)
    elif callback_data.get('tanlov') == "restart":
        os.remove(data.get('resume_name'))
        await state.reset_data()
        await UserInfo.first()
        await c.message.edit_text(_("–¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞—à", locale=user_lang), reply_markup=language_inl_kb)

    if callback_data.get('tanlov') == "ortga":
        statee = await state.get_state()

        if statee == "UserInfo:fio":
            await UserInfo.previous()
            try:
                await c.message.bot.delete_message(c.message.chat.id, message_id=data.get('anketams'))
            except Exception:
                pass
            await c.message.edit_text("–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º ! –ö–µ–ª–∏–Ω–≥, –∞–≤–≤–∞–ª —Ö–∏–∑–º–∞—Ç –∫—û—Ä—Å–∞—Ç–∏—à —Ç–∏–ª–∏–Ω–∏ —Ç–∞–Ω–ª–∞–± –æ–ª–∞–π–ª–∏–∫.\n\nAssalomu alaykum ! Keling, avval xizmat ko'rsatish tilini tanlab olaylik.\n\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ! –î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏–º —è–∑—ã–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.", reply_markup=language_inl_kb)
        if statee == 'UserInfo:jins':
            await UserInfo.previous()
            try:
                await c.message.delete()
            except:
                pass
            phonems = await c.message.answer(_("–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ +998********* —à–∞–∫–ª–¥–∞ —é–±–æ—Ä–∏–Ω–≥, —ë–∫–∏ \"üì± –†–∞“õ–∞–º —é–±–æ—Ä–∏—à\" —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥:", locale=user_lang), reply_markup=phone_keyb(user_lang))
            await state.update_data(phonems=phonems.message_id)
        if statee == 'UserInfo:age':
            await UserInfo.previous()
            phonems = await c.message.edit_text(_("{phone} —Ä–∞–∫–∞–º–∏ –∫–∞–±—É–ª –∫–∏–ª–∏–Ω–≥–∞–Ω\n–ñ–∏–Ω—Å–∏–Ω–≥–∏–∑:", locale=user_lang).format(phone=data.get('phone')), reply_markup=jins_inl_kb(user_lang))
            await state.update_data(phonems=phonems.message_id)
        if statee == 'UserInfo:education':
            await UserInfo.previous()
            await c.message.edit_text(_("–Å—à–∏–Ω–≥–∏–∑:", locale=user_lang), reply_markup=yosh_tanlash_inl_kb(user_lang))
        if statee == 'UserInfo:prog_language':
            await UserInfo.previous()
            await c.message.edit_text(_("–ú–∞—ä–ª—É–º–æ—Ç–∏–Ω–≥–∏–∑:", locale=user_lang), reply_markup=education_inl_kb(user_lang))
        if statee == 'UserInfo:additional':
            await UserInfo.previous()
            await state.update_data(extra_category=list(), extra_id=list())
            await c.message.edit_text(_("“ö–∞–π—Å–∏ –¥–∞—Å—Ç—É—Ä–ª–∞—à —Ç–∏–ª–∏ –±—û–π–∏—á–∞ —û–∑ —Ñ–∞–æ–ª–∏—è—Ç–∏–Ω–≥–∏–∑–Ω–∏ —é—Ä–∏—Ç–∏—à–Ω–∏ –∏—Å—Ç–∞–π—Å–∏–∑ ?", locale=user_lang), reply_markup=await prog_languages_kb(data.get("language")))
        if statee == 'UserInfo:resume':
            await UserInfo.previous()
            addms = await c.message.edit_text(_("“ö—û—à–∏–º—á–∞ –Ω–∏–º–∞–ª–∞—Ä–Ω–∏ –±–∏–ª–∞—Å–∏–∑?\n–¢–∞–Ω–ª–∞–Ω–≥–∞–Ω:", locale=user_lang), reply_markup=await extra_skills_kb(data.get("language"), dict()))
            await state.update_data(addms=addms.message_id)
        if statee == 'UserInfo:final':
            await UserInfo.previous()
            try:
                os.remove(data.get('resume_name'))
            except Exception:
                pass
            addms = await c.message.edit_text(_("–†–µ–∑—é–º–µ–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥", locale=user_lang), reply_markup=orqaga_inl_kb(user_lang))
            await state.update_data(addms=addms.message_id)

    if callback_data.get('tanlov') == "extra_tasdiqlash":
        addms = await c.message.edit_text(_("–†–µ–∑—é–º–µ–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥", locale=user_lang), reply_markup=orqaga_inl_kb(user_lang))
        await state.update_data(addms=addms.message_id)
        await UserInfo.next()

def register_callbacks(dp: Dispatcher):
    dp.register_callback_query_handler(language_callbacks, lang_callback.filter(), state="*")  
    dp.register_callback_query_handler(jins_callbacks, jins_callback.filter(), state=UserInfo.jins)
    dp.register_callback_query_handler(age_callbacks, yoshlar_callback.filter(), state=UserInfo.age)
    dp.register_callback_query_handler(education_callbacks, education_callback.filter(), state=UserInfo.education)
    dp.register_callback_query_handler(prog_lang_callbacks, programming_lang_callback.filter(), state=UserInfo.prog_language)
    dp.register_callback_query_handler(tasdiqlash_callbacks, tasdiqlash_callback.filter(), state='*')
    dp.register_callback_query_handler(extra_skills, extra_lang_callback.filter(), state=UserInfo.additional)
    